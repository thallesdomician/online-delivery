/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CreateOpeningWeekDayArgs } from "./CreateOpeningWeekDayArgs";
import { UpdateOpeningWeekDayArgs } from "./UpdateOpeningWeekDayArgs";
import { DeleteOpeningWeekDayArgs } from "./DeleteOpeningWeekDayArgs";
import { OpeningWeekDayFindManyArgs } from "./OpeningWeekDayFindManyArgs";
import { OpeningWeekDayFindUniqueArgs } from "./OpeningWeekDayFindUniqueArgs";
import { OpeningWeekDay } from "./OpeningWeekDay";
import { OpenHourFindManyArgs } from "../../openHour/base/OpenHourFindManyArgs";
import { OpenHour } from "../../openHour/base/OpenHour";
import { Store } from "../../store/base/Store";
import { OpeningWeekDayService } from "../openingWeekDay.service";

@graphql.Resolver(() => OpeningWeekDay)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class OpeningWeekDayResolverBase {
  constructor(
    protected readonly service: OpeningWeekDayService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _openingWeekDaysMeta(
    @graphql.Args() args: OpeningWeekDayFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @Public()
  @graphql.Query(() => [OpeningWeekDay])
  async openingWeekDays(
    @graphql.Args() args: OpeningWeekDayFindManyArgs
  ): Promise<OpeningWeekDay[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => OpeningWeekDay, { nullable: true })
  async openingWeekDay(
    @graphql.Args() args: OpeningWeekDayFindUniqueArgs
  ): Promise<OpeningWeekDay | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OpeningWeekDay)
  @nestAccessControl.UseRoles({
    resource: "OpeningWeekDay",
    action: "create",
    possession: "any",
  })
  async createOpeningWeekDay(
    @graphql.Args() args: CreateOpeningWeekDayArgs
  ): Promise<OpeningWeekDay> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        store: args.data.store
          ? {
              connect: args.data.store,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OpeningWeekDay)
  @nestAccessControl.UseRoles({
    resource: "OpeningWeekDay",
    action: "update",
    possession: "any",
  })
  async updateOpeningWeekDay(
    @graphql.Args() args: UpdateOpeningWeekDayArgs
  ): Promise<OpeningWeekDay | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          store: args.data.store
            ? {
                connect: args.data.store,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OpeningWeekDay)
  @nestAccessControl.UseRoles({
    resource: "OpeningWeekDay",
    action: "delete",
    possession: "any",
  })
  async deleteOpeningWeekDay(
    @graphql.Args() args: DeleteOpeningWeekDayArgs
  ): Promise<OpeningWeekDay | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OpenHour])
  @nestAccessControl.UseRoles({
    resource: "OpenHour",
    action: "read",
    possession: "any",
  })
  async openHour(
    @graphql.Parent() parent: OpeningWeekDay,
    @graphql.Args() args: OpenHourFindManyArgs
  ): Promise<OpenHour[]> {
    const results = await this.service.findOpenHour(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @Public()
  @graphql.ResolveField(() => Store, { nullable: true })
  async store(@graphql.Parent() parent: OpeningWeekDay): Promise<Store | null> {
    const result = await this.service.getStore(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
